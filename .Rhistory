read.csv('./Data/colors.csv')
colors <- read.csv("./Data/colors.csv")
View(colors)
install.packages(c("dplyr", "ggplot2", "knitr", "tidyr", "lubridate"))
install.packages(c("dplyr", "ggplot2", "knitr", "tidyr", "lubridate"))
drop_na()
inventories <- read.csv("./Data/inventories.csv")
inventory_parts <- read.csv("./Data/inventory_parts.csv")
parts <- read.csv("./Data/parts.csv")
part_categories <- read.csv("./Data/part_categories.csv")
part_relationships <- read.csv("./Data/part_relationships.csv")
elements <- read.csv("./Data/elements.csv")
colors <- read.csv("./Data/colors.csv")
inventory_minifigs <- read.csv("./Data/inventory_minifigs.csv")
minifigs <- read.csv("./Data/minifigs.csv")
inventory_sets <- read.csv("./Data/inventory_sets.csv")
sets <- read.csv("./Data/sets.csv")
themes <- read.csv("./Data/themes.csv")
head(elements)
head(colors)
sets_numeric <- sets %>%
select(year, num_parts) %>%
mutate(year = as.numeric(year))
library(tidyr)
sets_numeric <- sets %>%
select(year, num_parts) %>%
mutate(year = as.numeric(year))
head(sets)
library(dplyr)
sets_numeric <- sets %>%
select(year, num_parts) %>%
mutate(year = as.numeric(year))
sets_numeric
cor(sets_numeric$year, sets_numeric$num_parts)
View(sets)
View(themes)
View(inventory_sets)
View(parts)
View(inventories)
View(sets)
sets_numeric %>% group_by(year)
yearly_avg_num_parts <- sets %>%
group_by(year) %>%
summarise(average_num_parts = mean(num_parts, na.rm = TRUE)) %>%
arrange(year)
yearly_avg_num_parts
yearly_avg_num_parts <- sets %>%
filter(num_parts > 0) %>%  # Pomijamy zestawy z 0 częściami
group_by(year) %>%
summarise(average_num_parts = mean(num_parts, na.rm = TRUE)) %>%
arrange(year)
yearly_avg_num_parts
ggplot(yearly_avg_num_parts, aes(x = year, y = average_num_parts)) +
geom_line() +
geom_point() +
labs(title = "Średnia liczba klocków w zestawach LEGO na przestrzeni lat",
x = "Rok",
y = "Średnia liczba klocków (zestawy z co najmniej 1 klockiem)")
library(ggplot2)
ggplot(yearly_avg_num_parts, aes(x = year, y = average_num_parts)) +
geom_line() +
geom_point() +
labs(title = "Średnia liczba klocków w zestawach LEGO na przestrzeni lat",
x = "Rok",
y = "Średnia liczba klocków (zestawy z co najmniej 1 klockiem)")
cor(yearly_avg_num_parts$year, yearly_avg_num_parts$average_num_parts)
theme_analysis <- sets %>%
group_by(theme_id) %>%
summarise(count = n(), average_num_parts = mean(num_parts, na.rm = TRUE)) %>%
arrange(desc(count))
theme_analysis
theme_analysis <- theme_analysis %>%
left_join(themes, by = "theme_id")
theme_analysis <- theme_analysis %>%
left_join(themes, by = "id")
theme_analysis <- theme_analysis %>%
left_join(themes, by = c("theme_id"="id"))
theme_analysis
ggplot(theme_analysis, aes(x = reorder(name, count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Liczba zestawów na temat LEGO",
x = "Temat",
y = "Liczba zestawów")
)
)
)
;
sa'dla'
f[slg]
+
)
sfp[dkf]
;dsf
cvx
czx
clear
head(sets)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(name_set, year, theme_id, name_theme)
library(dplyr)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(name_set, year, theme_id, name_theme)
View(sets_themes)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(name_set, year, theme_id, name_theme, num_parts)
View(sets_themes)
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
library(caret)
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
training = sets_themes[in_training,]
training = sets_themes[-in_training,]
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
training = sets_themes[in_training,]
testing = sets_themes[-in_training,]
head(training)
length(training)
length(testing)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(name_set, year, theme_id, name_theme, num_parts)
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
training = sets_themes[in_training,]
testing = sets_themes[-in_training,]
in_training
training
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(name_set, year, theme_id, name_theme, num_parts)
View(sets_themes)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(year, name_theme, num_parts)
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
training = sets_themes[in_training,]
testing = sets_themes[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(year, name_theme, num_parts)
in_training <- createDataPartition(y=sets_themes$num_parts, p=.75, list=FALSE)
training = sets_themes[in_training,]
testing = sets_themes[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
model <- train(num_parts~.,
data=training,
method="lm",
trControl=tr_control)
predictions <- predict(model, newdata=testing)
sets_themes_grouped <- sets_themes %>%
group_by(year, name_theme) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE)) %>% ungroup()
sets_themes_grouped
sets_themes_grouped <- sets_themes %>%
group_by(year, name_theme) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
sets_themes_grouped
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(year, name_theme, num_parts)
sets_themes_grouped <- sets_themes %>%
group_by(year, name_theme) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes$average_num_parts, p=.75, list=FALSE)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
select(year, name_theme, num_parts)
sets_themes_grouped <- sets_themes %>%
group_by(year, name_theme) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
model <- train(average_num_parts~.,
data=training,
method="lm",
trControl=tr_control)
View(training)
head(training, n=15)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts)
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
model <- train(average_num_parts~.,
data=training,
method="lm",
trControl=tr_control)
predictions <- predict(model, newdata=testing)
postResample(predictions, testData$average_num_parts)
postResample(predictions, testomg$average_num_parts)
postResample(predictions, testing$average_num_parts)
View(minifigs)
View(sets)
View(inventories)
View(themes)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
View(sets_themes)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
model <- train(average_num_parts~.,
data=training,
method="lm",
trControl=tr_control)
predictions <- predict(model, newdata=testing)
postResample(predictions, testing$average_num_parts)
??train
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
tr_control <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
model <- train(average_num_parts~.,
data=training,
method="rf",
trControl=tr_control)
predictions <- predict(model, newdata=testing)
postResample(predictions, testing$average_num_parts)
head(predictions)
View(predictions)
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
rfGrid <- expand.grid(mtry = 10:30)
gridCtrl <- trainControl(
method = "repeatedcv",
summaryFunction = twoClassSummary,
classProbs = TRUE,
number = 3,
repeats = 6)
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
metric = "ROC",
preProc = c("center", "scale"),
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
rfGrid <- expand.grid(mtry = 10:30)
gridCtrl <- trainControl(
method = "repeatedcv",
number = 3,
repeats = 6,
search="grid")
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
warninigs()
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
print(fitTune)
fitTune
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
rfGrid <- expand.grid(mtry = 5:25)
gridCtrl <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5,
search="grid")
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
fitTune
predictions <- predict(fitTune, newdata=testing)
postResample(predictions, testing$average_num_parts)
predict(fitTune, newdata = )
head(testing)
test <- data.frame(year=c(2065), theme_id=c(3))
test
predict(fitTune, newdata = test)
test <- data.frame(year=c(2065, 2000, 1966, 1940), theme_id=c(3, 3, 3, 3))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2065, 2000, 1966, 1940, 1200), theme_id=c(3, 3, 3, 3, 3))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2065, 2000, 1966, 1940, 1200, 2120), theme_id=c(3, 3, 3, 3, 3, 3))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2065), theme_id=c(3))
test <- data.frame(year=c(2065), theme_id=c(4))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2065), theme_id=c(5))
testing
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
head(sets_themes)
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
rfGrid <- expand.grid(mtry = 10:20)
gridCtrl <- trainControl(
method = "repeatedcv",
number = 3,
repeats = 6,
search="grid")
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
predictions <- predict(fitTune, newdata=testing)
postResample(predictions, testing$average_num_parts)
head(testing)
head(sets_themes)
head(sets_themes_grouped)
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE), parent_id)
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE)) %>% ungroup()
head(sets_themes_grouped)
sets_themes_grouped
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id, parent_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
sets_themes_grouped
sets_themes <- sets %>%
left_join(themes, by = c("theme_id" = "id")) %>%
select(year, theme_id, num_parts, parent_id)  %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
sets_themes_grouped <- sets_themes %>%
group_by(year, theme_id, parent_id) %>%
summarise(average_num_parts = mean(num_parts, na.rm=TRUE))
in_training <- createDataPartition(y=sets_themes_grouped$average_num_parts, p=.75, list=FALSE)
training = sets_themes_grouped[in_training,]
testing = sets_themes_grouped[-in_training,]
rfGrid <- expand.grid(mtry = 10:20)
gridCtrl <- trainControl(
method = "repeatedcv",
number = 3,
repeats = 6,
search="grid")
fitTune <- train(average_num_parts ~ .,
data = training,
method = "rf",
trControl = gridCtrl,
tuneGrid = rfGrid,
ntree = 30)
predictions <- predict(fitTune, newdata=testing)
postResample(predictions, testing$average_num_parts)
test <- data.frame(year=c(2065, 2000, 1966, 1940, 1200, 2120), theme_id=c(3, 3, 3, 3, 3, 3), parent_id=c(1, 1, 1, 1, 1, 1))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2022, 2000, 1966, 1940, 1200, 2120), theme_id=c(3, 3, 3, 3, 3, 3), parent_id=c(1, 1, 1, 1, 1, 1))
predict(fitTune, newdata = test)
test <- data.frame(year=c(2023, 2000, 1966, 1940, 1200, 2120), theme_id=c(3, 3, 3, 3, 3, 3), parent_id=c(1, 1, 1, 1, 1, 1))
predict(fitTune, newdata = test)
head(colors)
view(colors)
colors
sets <- sets %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
themes <- themes %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
themes
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"))
x
head(sest)
head(sets)
inventories <- read.csv("./Data/inventories.csv")
inventory_parts <- read.csv("./Data/inventory_parts.csv")
parts <- read.csv("./Data/parts.csv")
part_categories <- read.csv("./Data/part_categories.csv")
part_relationships <- read.csv("./Data/part_relationships.csv")
elements <- read.csv("./Data/elements.csv")
colors <- read.csv("./Data/colors.csv")
inventory_minifigs <- read.csv("./Data/inventory_minifigs.csv")
minifigs <- read.csv("./Data/minifigs.csv")
inventory_sets <- read.csv("./Data/inventory_sets.csv")
sets <- read.csv("./Data/sets.csv")
themes <- read.csv("./Data/themes.csv")
themes <- themes %>%
mutate(parent_id = ifelse(is.na(parent_id), 0, parent_id))
head(themes)
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"))
x
head(x)
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix=("_set, theme_"))
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix=("_set, theme_"))
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix=("_set", "theme_"))
x <- sets %>%
left_join(themes, by = c("theme_id" = "id"), suffix=c("_set", "theme_"))
head(x)
clear
summary(x)
